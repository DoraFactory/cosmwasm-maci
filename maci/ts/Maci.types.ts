/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint256 = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export interface InstantiateMsg {
  coordinator: PubKey;
  max_vote_options: Uint256;
  parameters: MaciParameters;
  process_vkey: VKeyType;
  qtr_lib: QuinaryTreeRoot;
  round_info: RoundInfo;
  tally_vkey: VKeyType;
  voting_time?: VotingTime | null;
  whitelist?: Whitelist | null;
}
export interface PubKey {
  x: Uint256;
  y: Uint256;
}
export interface MaciParameters {
  int_state_tree_depth: Uint256;
  message_batch_size: Uint256;
  state_tree_depth: Uint256;
  vote_option_tree_depth: Uint256;
}
export interface VKeyType {
  vk_alpha1: string;
  vk_beta_2: string;
  vk_delta_2: string;
  vk_gamma_2: string;
  vk_ic0: string;
  vk_ic1: string;
}
export interface QuinaryTreeRoot {
  zeros: [Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256];
}
export interface RoundInfo {
  description: string;
  link: string;
  title: string;
}
export interface VotingTime {
  end_time?: Timestamp | null;
  start_time?: Timestamp | null;
}
export interface Whitelist {
  users: WhitelistConfig[];
}
export interface WhitelistConfig {
  addr: string;
  balance: Uint256;
}
export type ExecuteMsg = {
  set_params: {
    int_state_tree_depth: Uint256;
    message_batch_size: Uint256;
    state_tree_depth: Uint256;
    vote_option_tree_depth: Uint256;
  };
} | {
  set_round_info: {
    round_info: RoundInfo;
  };
} | {
  set_whitelists: {
    whitelists: Whitelist;
  };
} | {
  set_vote_options_map: {
    vote_option_map: string[];
  };
} | {
  start_voting_period: {};
} | {
  sign_up: {
    pubkey: PubKey;
  };
} | {
  start_process_period: {};
} | {
  stop_voting_period: {};
} | {
  publish_message: {
    enc_pub_key: PubKey;
    message: Message;
  };
} | {
  process_message: {
    new_state_commitment: Uint256;
    proof: ProofType;
  };
} | {
  stop_processing_period: {};
} | {
  process_tally: {
    new_tally_commitment: Uint256;
    proof: ProofType;
  };
} | {
  stop_tallying_period: {
    results: Uint256[];
    salt: Uint256;
  };
};
export interface Message {
  data: [Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256];
}
export interface ProofType {
  a: string;
  b: string;
  c: string;
}
export type QueryMsg = {
  get_round_info: {};
} | {
  get_voting_time: {};
} | {
  get_period: {};
} | {
  get_num_sign_up: {};
} | {
  get_msg_chain_length: {};
} | {
  get_result: {
    index: Uint256;
  };
} | {
  get_all_result: {};
} | {
  get_state_idx_inc: {
    address: Addr;
  };
} | {
  get_voice_credit_balance: {
    index: Uint256;
  };
} | {
  white_list: {};
} | {
  is_white_list: {
    sender: string;
  };
} | {
  white_balance_of: {
    sender: string;
  };
} | {
  vote_option_map: {};
} | {
  max_vote_options: {};
};
export type Addr = string;
export type PeriodStatus = "pending" | "voting" | "processing" | "tallying" | "ended";
export interface Period {
  status: PeriodStatus;
}
export type Boolean = boolean;
export type ArrayOfString = string[];