{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "coordinator",
    "max_vote_options",
    "parameters",
    "process_vkey",
    "qtr_lib",
    "round_info",
    "tally_vkey"
  ],
  "properties": {
    "coordinator": {
      "$ref": "#/definitions/PubKey"
    },
    "max_vote_options": {
      "$ref": "#/definitions/Uint256"
    },
    "parameters": {
      "$ref": "#/definitions/MaciParameters"
    },
    "process_vkey": {
      "$ref": "#/definitions/VKeyType"
    },
    "qtr_lib": {
      "$ref": "#/definitions/QuinaryTreeRoot"
    },
    "round_info": {
      "$ref": "#/definitions/RoundInfo"
    },
    "tally_vkey": {
      "$ref": "#/definitions/VKeyType"
    },
    "voting_time": {
      "anyOf": [
        {
          "$ref": "#/definitions/VotingTime"
        },
        {
          "type": "null"
        }
      ]
    },
    "whitelist": {
      "anyOf": [
        {
          "$ref": "#/definitions/Whitelist"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "MaciParameters": {
      "type": "object",
      "required": [
        "int_state_tree_depth",
        "message_batch_size",
        "state_tree_depth",
        "vote_option_tree_depth"
      ],
      "properties": {
        "int_state_tree_depth": {
          "$ref": "#/definitions/Uint256"
        },
        "message_batch_size": {
          "$ref": "#/definitions/Uint256"
        },
        "state_tree_depth": {
          "$ref": "#/definitions/Uint256"
        },
        "vote_option_tree_depth": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false
    },
    "PubKey": {
      "type": "object",
      "required": [
        "x",
        "y"
      ],
      "properties": {
        "x": {
          "$ref": "#/definitions/Uint256"
        },
        "y": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false
    },
    "QuinaryTreeRoot": {
      "type": "object",
      "required": [
        "zeros"
      ],
      "properties": {
        "zeros": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint256"
          },
          "maxItems": 9,
          "minItems": 9
        }
      },
      "additionalProperties": false
    },
    "RoundInfo": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "link": {
          "type": [
            "string",
            "null"
          ]
        },
        "title": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "VKeyType": {
      "type": "object",
      "required": [
        "vk_alpha1",
        "vk_beta_2",
        "vk_delta_2",
        "vk_gamma_2",
        "vk_ic0",
        "vk_ic1"
      ],
      "properties": {
        "vk_alpha1": {
          "type": "string"
        },
        "vk_beta_2": {
          "type": "string"
        },
        "vk_delta_2": {
          "type": "string"
        },
        "vk_gamma_2": {
          "type": "string"
        },
        "vk_ic0": {
          "type": "string"
        },
        "vk_ic1": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "VotingTime": {
      "type": "object",
      "properties": {
        "end_time": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "start_time": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Whitelist": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WhitelistConfig"
          }
        }
      },
      "additionalProperties": false
    },
    "WhitelistConfig": {
      "type": "object",
      "required": [
        "addr",
        "balance"
      ],
      "properties": {
        "addr": {
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false
    }
  }
}
